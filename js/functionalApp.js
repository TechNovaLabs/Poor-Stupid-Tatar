// –ò–º—è –¥—Ä—É–≥–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
const friendName = "–ù–∏—â–µ–±—Ä–æ–¥";

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
const incomeCategories = {
    salary: "–ó–∞—Ä–ø–ª–∞—Ç–∞",
    bonus: "–ü—Ä–µ–º–∏—è",
    freelance: "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
    gift: "–ü–æ–¥–∞—Ä–æ–∫",
    other: "–î—Ä—É–≥–æ–µ"
};

const expenseCategories = {
    rent: "–ê—Ä–µ–Ω–¥–∞",
    food: "–ï–¥–∞",
    transport: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    entertainment: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    health: "–ó–¥–æ—Ä–æ–≤—å–µ",
    resourant: "–ö–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
    fitnes: "–°–ø–æ—Ä—Ç-–∑–∞–ª",
    taxi: "–¢–∞–∫—Å–∏",
    shoping: "–û–¥–µ–∂–¥–∞",
    other: "–î—Ä—É–≥–æ–µ"
};

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const incomeMessages = {
    salary: `–û—Ö—É–µ—Ç—å ${friendName}, —Ç—ã –ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É, –Ω–µ–∑–∞–±—É–¥—å —Å–ø—É—Å—Ç–∏—Ç—å –µ–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ –Ω–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é —Ö—É–π–Ω—é`,
    bonus: `–ï–±–∞—Ç—å —Ç—ã –º–æ–ª–æ–¥–µ—Ü ${friendName}, –æ–≥–æ–ª—è–ª –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∂–æ–ø—É —á—Ç–æ –±—ã –µ–µ –ø–æ–ª—É—á–∏—Ç—å?`,
    freelance: `${friendName}, –∫–∞–∫–∏–º –Ω–µ–ø–æ—Ç—Ä–µ–±—Å—Ç–≤–æ–º —Ç—ã –æ–ø—è—Ç—å –∑–∞–Ω—è–ª—Å—è —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–∏ –∫–æ–ø–µ–π–∫–∏?`,
    gift: `${friendName}, –Ω–µ —Ä–∞–¥—É–π—Å—è, —Ç–µ–±–µ –¥–∞–ª–∏ –∏—Ö –∏–∑ –∂–∞–ª–æ—Å—Ç–∏`,
    other: `${friendName}, —Ç—É—Ç –¥–∞–∂–µ —è –≤ –∞—Ö—É–µ –æ—Ç –∫—É–¥–∞ —Ç—ã –∏—Ö –ø–æ–ª—É—á–∏–ª`
};

const expenseMessages = {
    rent: `–†–∞–Ω–∏—Å, —Ç–≤–æ–∏–º –ø—Ä–µ–¥–∫–∞–º —Å—Ç—ã–¥–Ω–æ —á—Ç–æ —Ç—ã –ø–ª–∞—Ç–∏—à—å —Ä—É—Å—Å–∫–∏–º –∑–∞ –∂–∏–ª—å–µ`,
    food: `–†–∞–Ω–∏—Å, –Ω–∞–¥–µ—é—Å—å –æ–Ω–æ —Ç–æ–≥–æ —Å—Ç–æ–∏–ª–æ? –£ —Ç–µ–±—è –∂–µ –±–∞–±–æ–∫ –¥–æ—Ö—É—è —á—Ç–æ –±—ã –Ω–∞ —ç—Ç–æ —Ç—Ä–∞—Ç–∏—Ç—å`,
    transport: `–ù—É –µ–±–∞—Ç—å, —Ç—ã –∏–¥–∏–æ—Ç? –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª —Ö–æ–¥–∏—Ç—å –ø–µ—à–∫–æ–º?`,
    entertainment: `–†–∞–Ω–∏—Å, —è –≤ –∞—Ö—É–µ, –∫–æ–≥–¥–∞ —Ç—ã —É—Å–ø–µ–ª —Ç–∞–∫ –∑–∞–µ–±–∞—Ç—å—Å—è?`,
    health: `–¢—ã –∂–µ –µ—â–µ –ø–∏–∑–¥—é–∫, —Ö—É–ª–∏ —Ç–∞–º —É —Ç–µ–±—è –º–æ–∂–µ—Ç –±–æ–ª–µ—Ç—å? `,
    resourant: `–†–∞–Ω–∏—Å, –µ–±–∞—Ç—å —Ç—ã –¥—É—Ä–∞–∫! –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ —É–∂–µ –Ω–µ –æ–±–µ–¥–∞–µ–º?`,
    fitnes: `–ë–ª—è—è—è, —Ç—ã –∂–µ –≤–∏–¥–µ–ª —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–æ? —Ç—É—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ö–∏—Ä—É—Ä–≥`,
    taxi: `–†–∞–Ω–∏—Å, —Ç—É—Ç —è –º–æ–≥—É —Ç–µ–±—è –ø–æ—Ö–≤–∞–ª–∏—Ç—å! –ú–æ–ª–æ–¥–µ—Ü! –î–µ–±–∏–ª –±–ª—è—Ç—å`,
    shoping: `–†–∞–Ω–∏—Å, –Ω–æ–≤—ã–µ —à–º–æ—Ç–∫–∏ —Ç–µ–±–µ –Ω–µ –ø–æ–º–æ–≥—É—Ç, —Ç—ã –∏ —Ç–∞–∫ —É—Ä–æ–¥`,
    other: `–ù—É –∏ –Ω–∞—Ö—É—è —Ç–µ–±–µ —ç—Ç–æ? –∫—É–ø–∏–ª –±—ã –ª—É—á—à–µ –º–æ–∑–≥–∏`
};

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
const savingsMessages = {
    add: `–û—Ç–ª–∏—á–Ω–æ ${friendName}! –¢—ã —Å—Ç–∞–ª –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏! üí™`,
    withdraw: `–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ ${friendName}... –¢—ã —Å—Ç–∞–ª –¥–∞–ª—å—à–µ –æ—Ç —Å–≤–æ–µ–π —Ü–µ–ª–∏. üòî`,
    goal: `–û—Ç–ª–∏—á–Ω–∞—è —Ü–µ–ª—å ${friendName}! –°—Ç—Ä–µ–º–∏—Å—å –∫ –Ω–µ–π! üéØ`
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function () {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –¥—Ä—É–≥–∞
    document.getElementById('userInfo').textContent = friendName;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    setGreeting();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Local Storage
    loadData();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    initCalendar();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
function setGreeting() {
    const now = new Date();
    const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000)); // UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã

    let greetingText = '';
    const hour = moscowTime.getHours();

    if (hour >= 5 && hour < 12) {
        greetingText = `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${friendName}`;
    } else if (hour >= 12 && hour < 18) {
        greetingText = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${friendName}`;
    } else if (hour >= 18 && hour < 23) {
        greetingText = `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, ${friendName}`;
    } else {
        greetingText = `–î–æ–±—Ä–æ–π –Ω–æ—á–∏, ${friendName}`;
    }

    document.getElementById('greetingText').textContent = greetingText;

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    document.getElementById('dateInfo').textContent = moscowTime.toLocaleDateString('ru-RU', options);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Local Storage
function loadData() {
    const storedIncomes = localStorage.getItem('finTrackIncomes');
    const storedExpenses = localStorage.getItem('finTrackExpenses');
    const storedSavings = localStorage.getItem('finTrackSavings');
    const storedSavingsGoal = localStorage.getItem('finTrackSavingsGoal');

    window.finances = {
        incomes: storedIncomes ? JSON.parse(storedIncomes) : [],
        expenses: storedExpenses ? JSON.parse(storedExpenses) : [],
        savings: storedSavings ? JSON.parse(storedSavings) : [],
        savingsGoal: storedSavingsGoal ? parseFloat(storedSavingsGoal) : 0
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Local Storage
function saveData() {
    localStorage.setItem('finTrackIncomes', JSON.stringify(finances.incomes));
    localStorage.setItem('finTrackExpenses', JSON.stringify(finances.expenses));
    localStorage.setItem('finTrackSavings', JSON.stringify(finances.savings));
    localStorage.setItem('finTrackSavingsGoal', finances.savingsGoal.toString());
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function initCalendar() {
    const now = new Date();
    window.currentMonth = now.getMonth();
    window.currentYear = now.getFullYear();

    updateCalendar();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function updateCalendar() {
    const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];

    document.getElementById('currentMonth').textContent =
        `${monthNames[currentMonth]} ${currentYear}`;

    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDay = firstDay.getDay();

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    const adjustedStartingDay = startingDay === 0 ? 6 : startingDay - 1;

    const calendarGrid = document.getElementById('calendarGrid');
    calendarGrid.innerHTML = '';

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    weekDays.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = day;
        dayElement.style.fontWeight = 'bold';
        calendarGrid.appendChild(dayElement);
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < adjustedStartingDay; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day';
        calendarGrid.appendChild(emptyDay);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const today = new Date();
    for (let i = 1; i <= daysInMonth; i++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = i;
        dayElement.dataset.day = i;
        dayElement.dataset.month = currentMonth;
        dayElement.dataset.year = currentYear;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
        if (i === today.getDate() &&
            currentMonth === today.getMonth() &&
            currentYear === today.getFullYear()) {
            dayElement.classList.add('active');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        const hasTransactions = finances.incomes.some(income =>
            new Date(income.date).getDate() === i &&
            new Date(income.date).getMonth() === currentMonth &&
            new Date(income.date).getFullYear() === currentYear
        ) || finances.expenses.some(expense =>
            new Date(expense.date).getDate() === i &&
            new Date(expense.date).getMonth() === currentMonth &&
            new Date(expense.date).getFullYear() === currentYear
        ) || finances.savings.some(saving =>
            new Date(saving.date).getDate() === i &&
            new Date(saving.date).getMonth() === currentMonth &&
            new Date(saving.date).getFullYear() === currentYear
        );

        if (hasTransactions) {
            dayElement.style.backgroundColor = 'var(--primary)';
            dayElement.style.color = 'white';
        }

        dayElement.addEventListener('click', function () {
            showDayTransactions(i, currentMonth, currentYear);
        });

        calendarGrid.appendChild(dayElement);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
function showDayTransactions(day, month, year) {
    const selectedDate = new Date(year, month, day);
    const formattedDate = selectedDate.toLocaleDateString('ru-RU');

    const dayIncomes = finances.incomes.filter(income => {
        const incomeDate = new Date(income.date);
        return incomeDate.getDate() === day &&
            incomeDate.getMonth() === month &&
            incomeDate.getFullYear() === year;
    });

    const dayExpenses = finances.expenses.filter(expense => {
        const expenseDate = new Date(expense.date);
        return expenseDate.getDate() === day &&
            expenseDate.getMonth() === month &&
            expenseDate.getFullYear() === year;
    });

    const daySavings = finances.savings.filter(saving => {
        const savingDate = new Date(saving.date);
        return savingDate.getDate() === day &&
            savingDate.getMonth() === month &&
            savingDate.getFullYear() === year;
    });

    let reportHTML = `<h3>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ ${formattedDate}</h3>`;

    if (dayIncomes.length === 0 && dayExpenses.length === 0 && daySavings.length === 0) {
        reportHTML += '<p>–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>';
    } else {
        if (dayIncomes.length > 0) {
            reportHTML += '<h4>–î–æ—Ö–æ–¥—ã:</h4><ul>';
            dayIncomes.forEach(income => {
                reportHTML += `<li>${incomeCategories[income.category]}: ${income.amount} ‚ÇΩ</li>`;
            });
            reportHTML += '</ul>';
        }

        if (dayExpenses.length > 0) {
            reportHTML += '<h4>–†–∞—Å—Ö–æ–¥—ã:</h4><ul>';
            dayExpenses.forEach(expense => {
                reportHTML += `<li>${expenseCategories[expense.category]}: ${expense.amount} ‚ÇΩ</li>`;
            });
            reportHTML += '</ul>';
        }

        if (daySavings.length > 0) {
            reportHTML += '<h4>–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è:</h4><ul>';
            daySavings.forEach(saving => {
                const action = saving.action === 'add' ? '+' : '-';
                reportHTML += `<li>${saving.description || '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è'}: ${action}${saving.amount} ‚ÇΩ</li>`;
            });
            reportHTML += '</ul>';
        }
    }

    document.getElementById('reportData').innerHTML = reportHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö —Å—É–º–º
    const totalIncome = finances.incomes.reduce((sum, income) => sum + parseFloat(income.amount), 0);
    const totalExpense = finances.expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);
    const totalSavings = finances.savings.reduce((sum, saving) => {
        return saving.action === 'add' ? sum + parseFloat(saving.amount) : sum - parseFloat(saving.amount);
    }, 0);
    const totalAmount = totalIncome - totalExpense;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    document.getElementById('totalAmount').textContent = `${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ`;
    document.getElementById('incomeAmount').textContent = `${totalIncome.toLocaleString('ru-RU')} ‚ÇΩ`;
    document.getElementById('expenseAmount').textContent = `${totalExpense.toLocaleString('ru-RU')} ‚ÇΩ`;
    document.getElementById('savingsAmount').textContent = `${totalSavings.toLocaleString('ru-RU')} ‚ÇΩ`;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    updateSavingsProgress(totalSavings);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    updateTransactionLists();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
function updateSavingsProgress(currentSavings) {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');

    if (finances.savingsGoal > 0) {
        const progress = Math.min((currentSavings / finances.savingsGoal) * 100, 100);
        progressFill.style.width = `${progress}%`;
        progressText.textContent = `${Math.round(progress)}%`;
    } else {
        progressFill.style.width = '0%';
        progressText.textContent = '–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactionLists() {
    const incomeList = document.getElementById('incomeList');
    const expenseList = document.getElementById('expenseList');
    const savingsList = document.getElementById('savingsList');

    // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
    incomeList.innerHTML = '';
    expenseList.innerHTML = '';
    savingsList.innerHTML = '';

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    const recentIncomes = finances.incomes.slice(-5).reverse();
    recentIncomes.forEach(income => {
        const item = createTransactionItem(income, 'income');
        incomeList.appendChild(item);
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    const recentExpenses = finances.expenses.slice(-5).reverse();
    recentExpenses.forEach(expense => {
        const item = createTransactionItem(expense, 'expense');
        expenseList.appendChild(item);
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    const recentSavings = finances.savings.slice(-5).reverse();
    recentSavings.forEach(saving => {
        const item = createTransactionItem(saving, 'savings');
        savingsList.appendChild(item);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function createTransactionItem(transaction, type) {
    const item = document.createElement('div');
    item.className = 'transaction-item';
    item.dataset.id = transaction.id;
    item.dataset.type = type;

    let categoryText = '';
    let amountText = '';

    if (type === 'income') {
        categoryText = incomeCategories[transaction.category];
        amountText = `+${parseFloat(transaction.amount).toLocaleString('ru-RU')} ‚ÇΩ`;
    } else if (type === 'expense') {
        categoryText = expenseCategories[transaction.category];
        amountText = `-${parseFloat(transaction.amount).toLocaleString('ru-RU')} ‚ÇΩ`;
    } else if (type === 'savings') {
        categoryText = transaction.description || '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è';
        const sign = transaction.action === 'add' ? '+' : '-';
        amountText = `${sign}${parseFloat(transaction.amount).toLocaleString('ru-RU')} ‚ÇΩ`;
    }

    item.innerHTML = `
        <div class="transaction-category">${categoryText}</div>
        <div class="transaction-amount ${type}">${amountText}</div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    item.addEventListener('click', function () {
        openEditModal(transaction, type);
    });

    return item;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function openEditModal(transaction, type) {
    const modal = document.getElementById('editModal');
    const form = document.getElementById('editForm');
    const title = document.getElementById('editModalTitle');
    const categorySelect = document.getElementById('editCategory');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${type === 'income' ? '–¥–æ—Ö–æ–¥' : type === 'expense' ? '—Ä–∞—Å—Ö–æ–¥' : '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ'}`;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
    document.getElementById('editId').value = transaction.id;
    document.getElementById('editType').value = type;
    document.getElementById('editAmountInput').value = transaction.amount;
    document.getElementById('editDate').value = transaction.date;
    document.getElementById('editDescription').value = transaction.description || '';

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categorySelect.innerHTML = '';

    if (type === 'income') {
        for (const [key, value] of Object.entries(incomeCategories)) {
            const option = document.createElement('option');
            option.value = key;
            option.textContent = value;
            option.selected = key === transaction.category;
            categorySelect.appendChild(option);
        }
    } else if (type === 'expense') {
        for (const [key, value] of Object.entries(expenseCategories)) {
            const option = document.createElement('option');
            option.value = key;
            option.textContent = value;
            option.selected = key === transaction.category;
            categorySelect.appendChild(option);
        }
    } else {
        // –î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —Å–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categorySelect.style.display = 'none';
        document.querySelector('label[for="editCategory"]').style.display = 'none';
    }

    modal.style.display = 'flex';
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    document.getElementById('addIncomeBtn').addEventListener('click', () => {
        document.getElementById('incomeModal').style.display = 'flex';
        document.getElementById('incomeDate').valueAsDate = new Date();
    });

    document.getElementById('addExpenseBtn').addEventListener('click', () => {
        document.getElementById('expenseModal').style.display = 'flex';
        document.getElementById('expenseDate').valueAsDate = new Date();
    });

    // –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏
    document.getElementById('manageSavingsBtn').addEventListener('click', () => {
        document.getElementById('savingsModal').style.display = 'flex';
    });

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏
    document.querySelectorAll('.savings-action-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            const action = this.dataset.action;
            setupSavingsForm(action);
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.close').forEach(closeBtn => {
        closeBtn.addEventListener('click', function () {
            this.closest('.modal').style.display = 'none';
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function (event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });

    // –§–æ—Ä–º—ã
    document.getElementById('incomeForm').addEventListener('submit', function (e) {
        e.preventDefault();
        addIncome();
    });

    document.getElementById('expenseForm').addEventListener('submit', function (e) {
        e.preventDefault();
        addExpense();
    });

    document.getElementById('savingsForm').addEventListener('submit', function (e) {
        e.preventDefault();
        manageSavings();
    });

    document.getElementById('editForm').addEventListener('submit', function (e) {
        e.preventDefault();
        saveEdit();
    });

    document.getElementById('deleteBtn').addEventListener('click', function () {
        deleteTransaction();
    });

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    document.getElementById('prevMonthBtn').addEventListener('click', function () {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        updateCalendar();
    });

    document.getElementById('nextMonthBtn').addEventListener('click', function () {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        updateCalendar();
    });

    // –ö–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    document.querySelectorAll('.report-filters .btn').forEach(btn => {
        if (btn.id !== 'customPeriodBtn') {
            btn.addEventListener('click', function () {
                const period = this.dataset.period;
                generateReport(period);
            });
        }
    });

    document.getElementById('customPeriodBtn').addEventListener('click', function () {
        document.getElementById('customPeriodModal').style.display = 'flex';
    });

    document.getElementById('customPeriodForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        if (startDate && endDate) {
            generateCustomReport(startDate, endDate);
            document.getElementById('customPeriodModal').style.display = 'none';
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ –±–ª–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
    const reportFilters = document.querySelector('.report-filters');
    const exportButtons = `
    <button class="btn" id="viewFullReportBtn">üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç</button>
    <button class="btn" id="exportPDFBtn">üìÑ PDF –æ—Ç—á–µ—Ç</button>`;

    reportFilters.insertAdjacentHTML('afterend', exportButtons);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
    document.getElementById('viewFullReportBtn').addEventListener('click', function () {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
        window.location.href = '../pages/report.html';
    });

    document.getElementById('exportPDFBtn').addEventListener('click', function () {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
        const now = new Date();
        const startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);

        window.location.href = `../pages/report.html?start=${startDate.toISOString().split('T')[0]}&end=${endDate.toISOString().split('T')[0]}`;
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
function setupSavingsForm(action) {
    const form = document.getElementById('savingsForm');
    const amountLabel = document.getElementById('savingsAmountLabel');
    const goalGroup = document.getElementById('goalGroup');
    const submitBtn = document.getElementById('savingsSubmitBtn');

    form.style.display = 'block';

    if (action === 'add') {
        amountLabel.textContent = '–°—É–º–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è';
        goalGroup.style.display = 'none';
        submitBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
    } else if (action === 'withdraw') {
        amountLabel.textContent = '–°—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è';
        goalGroup.style.display = 'none';
        submitBtn.textContent = '–°–Ω—è—Ç—å';
    } else if (action === 'setGoal') {
        amountLabel.textContent = '–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π';
        goalGroup.style.display = 'block';
        submitBtn.textContent = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å';

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        document.getElementById('savingsGoalInput').value = finances.savingsGoal || '';
    }

    form.dataset.action = action;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏
function manageSavings() {
    const action = document.getElementById('savingsForm').dataset.action;
    const amount = parseFloat(document.getElementById('savingsAmountInput').value);
    const description = document.getElementById('savingsDescription').value;

    if (action === 'setGoal') {
        const goal = parseFloat(document.getElementById('savingsGoalInput').value);
        finances.savingsGoal = goal;
        showNotification(savingsMessages.goal);
    } else {
        const saving = {
            id: Date.now(),
            amount: amount,
            action: action,
            date: new Date().toISOString().split('T')[0],
            description: description,
            timestamp: new Date().toISOString()
        };

        finances.savings.push(saving);

        if (action === 'add') {
            showNotification(savingsMessages.add);
        } else if (action === 'withdraw') {
            showNotification(savingsMessages.withdraw);
        }
    }

    saveData();
    updateUI();
    updateCalendar();

    document.getElementById('savingsModal').style.display = 'none';
    document.getElementById('savingsForm').reset();
    document.getElementById('savingsForm').style.display = 'none';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
function addIncome() {
    const amount = document.getElementById('incomeAmountInput').value;
    const category = document.getElementById('incomeCategory').value;
    const date = document.getElementById('incomeDate').value;
    const description = document.getElementById('incomeDescription').value;

    const income = {
        id: Date.now(),
        amount: parseFloat(amount),
        category,
        date,
        description,
        timestamp: new Date().toISOString()
    };

    finances.incomes.push(income);
    saveData();
    updateUI();
    updateCalendar();

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(incomeMessages[category]);

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
    document.getElementById('incomeModal').style.display = 'none';
    document.getElementById('incomeForm').reset();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
function addExpense() {
    const amount = document.getElementById('expenseAmountInput').value;
    const category = document.getElementById('expenseCategory').value;
    const date = document.getElementById('expenseDate').value;
    const description = document.getElementById('expenseDescription').value;

    const expense = {
        id: Date.now(),
        amount: parseFloat(amount),
        category,
        date,
        description,
        timestamp: new Date().toISOString()
    };

    finances.expenses.push(expense);
    saveData();
    updateUI();
    updateCalendar();

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(expenseMessages[category]);

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
    document.getElementById('expenseModal').style.display = 'none';
    document.getElementById('expenseForm').reset();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function saveEdit() {
    const id = parseInt(document.getElementById('editId').value);
    const type = document.getElementById('editType').value;
    const amount = parseFloat(document.getElementById('editAmountInput').value);
    const category = document.getElementById('editCategory').value;
    const date = document.getElementById('editDate').value;
    const description = document.getElementById('editDescription').value;

    let collection;
    if (type === 'income') {
        collection = finances.incomes;
    } else if (type === 'expense') {
        collection = finances.expenses;
    } else {
        collection = finances.savings;
    }

    const index = collection.findIndex(item => item.id === id);
    if (index !== -1) {
        collection[index].amount = amount;
        collection[index].date = date;
        collection[index].description = description;

        if (type !== 'savings') {
            collection[index].category = category;
        }

        saveData();
        updateUI();
        updateCalendar();

        showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    }

    document.getElementById('editModal').style.display = 'none';
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function deleteTransaction() {
    const id = parseInt(document.getElementById('editId').value);
    const type = document.getElementById('editType').value;

    let collection;
    if (type === 'income') {
        collection = finances.incomes;
    } else if (type === 'expense') {
        collection = finances.expenses;
    } else {
        collection = finances.savings;
    }

    const index = collection.findIndex(item => item.id === id);
    if (index !== -1) {
        collection.splice(index, 1);
        saveData();
        updateUI();
        updateCalendar();

        showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!');
    }

    document.getElementById('editModal').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.classList.add('show');

    setTimeout(() => {
        notification.classList.remove('show');
    }, 5000);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
function generateReport(period) {
    const now = new Date();
    let startDate, endDate;

    switch (period) {
        case 'day':
            startDate = new Date(now);
            endDate = new Date(now);
            break;
        case 'week':
            startDate = new Date(now);
            startDate.setDate(now.getDate() - now.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            endDate = new Date(now);
            endDate.setDate(startDate.getDate() + 6); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            break;
        case 'month':
            startDate = new Date(now.getFullYear(), now.getMonth(), 1);
            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            break;
    }

    generateCustomReport(startDate.toISOString().split('T')[0], endDate.toISOString().split('T')[0]);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥
function generateCustomReport(start, end) {
    const startDate = new Date(start);
    const endDate = new Date(end);

    const periodIncomes = finances.incomes.filter(income => {
        const incomeDate = new Date(income.date);
        return incomeDate >= startDate && incomeDate <= endDate;
    });

    const periodExpenses = finances.expenses.filter(expense => {
        const expenseDate = new Date(expense.date);
        return expenseDate >= startDate && expenseDate <= endDate;
    });

    const periodSavings = finances.savings.filter(saving => {
        const savingDate = new Date(saving.date);
        return savingDate >= startDate && savingDate <= endDate;
    });

    const totalIncome = periodIncomes.reduce((sum, income) => sum + parseFloat(income.amount), 0);
    const totalExpense = periodExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);
    const totalSavingsAdded = periodSavings
        .filter(s => s.action === 'add')
        .reduce((sum, saving) => sum + parseFloat(saving.amount), 0);
    const totalSavingsWithdrawn = periodSavings
        .filter(s => s.action === 'withdraw')
        .reduce((sum, saving) => sum + parseFloat(saving.amount), 0);
    const balance = totalIncome - totalExpense;

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const incomeByCategory = {};
    periodIncomes.forEach(income => {
        if (!incomeByCategory[income.category]) {
            incomeByCategory[income.category] = 0;
        }
        incomeByCategory[income.category] += parseFloat(income.amount);
    });

    const expenseByCategory = {};
    periodExpenses.forEach(expense => {
        if (!expenseByCategory[expense.category]) {
            expenseByCategory[expense.category] = 0;
        }
        expenseByCategory[expense.category] += parseFloat(expense.amount);
    });

    let reportHTML = `<h3>–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}</h3>`;
    reportHTML += `<p><strong>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</strong> ${totalIncome.toLocaleString('ru-RU')} ‚ÇΩ</p>`;
    reportHTML += `<p><strong>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:</strong> ${totalExpense.toLocaleString('ru-RU')} ‚ÇΩ</p>`;
    reportHTML += `<p><strong>–ë–∞–ª–∞–Ω—Å:</strong> ${balance.toLocaleString('ru-RU')} ‚ÇΩ</p>`;
    reportHTML += `<p><strong>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:</strong> ${totalSavingsAdded.toLocaleString('ru-RU')} ‚ÇΩ</p>`;
    reportHTML += `<p><strong>–°–Ω—è—Ç–æ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:</strong> ${totalSavingsWithdrawn.toLocaleString('ru-RU')} ‚ÇΩ</p>`;

    reportHTML += '<h4>–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</h4>';
    if (Object.keys(incomeByCategory).length > 0) {
        reportHTML += '<ul>';
        for (const category in incomeByCategory) {
            reportHTML += `<li>${incomeCategories[category]}: ${incomeByCategory[category].toLocaleString('ru-RU')} ‚ÇΩ</li>`;
        }
        reportHTML += '</ul>';
    } else {
        reportHTML += '<p>–ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>';
    }

    reportHTML += '<h4>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</h4>';
    if (Object.keys(expenseByCategory).length > 0) {
        reportHTML += '<ul>';
        for (const category in expenseByCategory) {
            reportHTML += `<li>${expenseCategories[category]}: ${expenseByCategory[category].toLocaleString('ru-RU')} ‚ÇΩ</li>`;
        }
        reportHTML += '</ul>';
    } else {
        reportHTML += '<p>–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>';
    }

    document.getElementById('reportData').innerHTML = reportHTML;
}